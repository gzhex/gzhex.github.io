<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>01 线程简介与实现</title>
      <link href="/2022/09/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B01-%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/09/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B01-%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="线程简介"><a href="#线程简介" class="headerlink" title="线程简介"></a>线程简介</h1><p>Process：程序。程序是指令和数据的有序集合，本身没有审核运行的含义，是一个静态的概念。</p><p>Thread：进程。进程是执行程序的一次执行过程，是一个动态的概念。是系统资源分配的单位。</p><p>通常在一个进程中可以包含若干个线程。线程是CPU调度和执行的单位。</p><h1 id="线程实现"><a href="#线程实现" class="headerlink" title="线程实现"></a>线程实现</h1><p><em><strong>Thread</strong></em></p><ol><li><p>自定义线程类继承Thread类</p></li><li><p>重写run()方法，编写线程执行体</p></li><li><p>创建线程对象，调用start()方法启动线程</p></li></ol><p><strong>线程开启不一定立即执行，由CPU调度。</strong></p><pre data-enlighter-language="java">public class TestThread1 extends Thread{    @Override    public void run(){  //run方法线程体        for(int i=0;i< 20;i++){            System.out.println("");        }    }    public static void main(String[] args){  //main线程，主线程        TestThread1 testThread1 = new TestThread1();        testThread1.start();  //调用start()方法开启线程    }}</pre><p><em><strong>Runnable接口</strong></em></p><ol><li><p>定义MyRunnable类实现Runnable接口</p></li><li><p>实行run()方法，编写线程执行体</p></li><li><p>创建线程对象，调用start()方法启动线程</p><pre data-enlighter-language="java">public class TestThread2 implements Runnable{ @Override public void run(){  //run方法线程体     for(int i=0;i< 20;i++){         System.out.println("");     } } public static void main(String[] args){       TestThread2 testThread2 = new TestThread2();  //创建实现类对象     //hread thread = new Thread(testThread2);  //创建代理类对象     //testThread2.start();  //调用start()方法开启线程     new Thread(testThread2).start(); }}</pre></li></ol><p><em><strong>Callable</strong></em></p><p>了解即可</p><p><em><strong>下载网图</strong></em></p><pre data-enlighter-language="java">import org.apache.commoms.io.FileUtils;import java.io.File;import java.io.IOException;import java.net.URL;public class Test implements Runnable{   private String url;   private String name;   private Test(String url, String name){       this.url = url;       this.name = name;   }    @Override    public void run(){        WebDownloader webDownloader = new WebDownloader();        webDownloader.downloader(url,name);        System.out.println("下载了文件名："+name);    }    public static void main(String[] args){        Test test = new Test("url","name");        new Thread(test).start();    }}class WebDownloader{    public void downloader(tring url, String name){        try{            FileUtils.copyURLToFile(new URL(url), new File(name));        }catch(IOException e){            e.printStackTrace();            System.out.println("IO异常");        }    }}</pre><p><em><strong>龟兔赛跑</strong></em></p><pre data-enlighter-language="java">public class Race implements Runnable{    public static String winner;    @Override    public void run(){        for(int i=0;i<=100;i++){            if(Thread.currentThread().getName().equals("兔子") && i%10==0){                try{                    Thread.sleep(10);                }catch(InterruptedException e){                    e.printStackTrace();                }            }            boolean flag = gameOver(i);            if(flag){                break;            }            System.out.println(Thread.currentThread().getName()+"-->跑了"+i+"步");        }    }    public boolean gameOver(int steps){        if(winner!=null){            return ture;        }{            if(step>=100){                winner = Thread.currentThread().getName();                System.out.println("Winner is "+winner);                return true;            }        }        return false;    }    public static void main(String[] args){        Race race = new Race();        new Thread(race,"兔子").start();        new Thread(race,"乌龟").start();    }}</pre><p><em><strong>静态代理</strong></em></p><pre data-enlighter-language="java">//类比理解new Thread(()-> System.out.println("")).start();new Company(new You()).HappyMarry();</pre><pre data-enlighter-language="java">public class StaticProxy{    public static void main(String[] args){        Company company = new Company(new You());        company.HappyMarry();    }}interface Marry{    void HappyMarry();}class You implements Marry{    @Override    public void HappyMarry(){        System.out.println("结婚中");    }}class Company implements Marry{    private Marry target;    public Company(Marry target){        this.target = target;    }    @Override    public void HappyMarry(){        before();        this.target.HappyMarry();        after();    }    private void before(){        System.out.println("结婚前");    }    private void after(){        System.out.println("结婚后");    }}</pre><p><em><strong>Lambda表达式</strong></em></p><pre data-enlighter-language="java">public class TestLambda1{    //3.静态内部类    static class Like2 implements ILike{        @Override        public void lambda(){            System.out.println("i like lambda2");        }    }    public static void main(String[] args){        ILike like = new ILike();        like.lambda();                like = new Like2();        like.lambda();        //4.局部内部类        static class Like3 implements ILike{            @Override            public void lambda(){                System.out.println("i like lambda3");            }        }        like = new Like3();        like.lambda();        //5.匿名内部类        like = new ILike(){            @Override            public void lambda(){                System.out.println("i like lambda4");            }        };        like.lambda();        //6.用lambda简化        like = ()->{            System.out.println("i like lambda5");        };        like.lambda();    }}//1.定义一个函数式接口interface ILike{    void lambda();}//2.实现类class Like implements ILike{    @Override    public void lambda(){        System.out.println("i like lambda");    }}</pre><pre data-enlighter-language="java">public class TestLambda2{    public static void main(String[] args){        Ilove love = new ILove();        //lambda表达式简化        like = (int a)->{            System.out.println("i love you-->"+a);        };        love.love(520);        //简化1.参数类型        like = (a)->{            System.out.println("i love you-->"+a);        };        love.love(520);        //简化2.括号        like = (a)->{            System.out.println("i love you-->"+a);        };        love.love(520);        //简化3.花括号        like = (a)-> System.out.println("i love you-->"+a);        love.love(520);    }}interface ILove{    void love(int a);}}</pre><h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><h1 id="线程通信问题"><a href="#线程通信问题" class="headerlink" title="线程通信问题"></a>线程通信问题</h1><h1 id="高级主题"><a href="#高级主题" class="headerlink" title="高级主题"></a>高级主题</h1>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06 异常</title>
      <link href="/2022/09/02/Java06-%E5%BC%82%E5%B8%B8/"/>
      <url>/2022/09/02/Java06-%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="异常体系结构"><a href="#异常体系结构" class="headerlink" title="异常体系结构"></a>异常体系结构</h1><p>Error、Exception</p><h1 id="Java异常处理机制"><a href="#Java异常处理机制" class="headerlink" title="Java异常处理机制"></a>Java异常处理机制</h1><p>抛出异常、捕获异常。try、catch、finally、throw、throws。</p><pre data-enlighter-language="java">int a = 1;int b = 0;try{  //try监控区域    if(b==0){        throw new ArithmeticException();  //主动抛出异常    }    System.out.println(a/b);}catch(ArithmeticException e){  //catch捕获异常    System.out.println("程序出现异常，变量b不能为0");}finally{  //finally处理善后工作    System.out.println("finally");}</pre><h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05 面向对象</title>
      <link href="/2022/09/01/Java05-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/09/01/Java05-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="初识面向对象"><a href="#初识面向对象" class="headerlink" title="初识面向对象"></a>初识面向对象</h1><p>面向对象编程(Object-Oriented Programming, OOP)，本质：<strong>以类的方式组织代码，以对象的形式封装数据</strong></p><p>三大特性：<strong>封装、继承、多态</strong></p><h1 id="对象的创建分析"><a href="#对象的创建分析" class="headerlink" title="对象的创建分析"></a>对象的创建分析</h1><p>使用new关键字创建对象。此时，除了分配内存空间外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。</p><p>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的，并且构造器有以下两个特点：1. 必须和类的名字相同； 2. 必须没有返回类型，也不能写void。</p><p>定义有参构造之后，需要显示的定义一个无参构造，才能使用无参构造。</p><p>this指代当前对象。</p><pre data-enlighter-language="java">Person person = new Person()public Person(){}public Person(String name){    this.name = name;}public Person(String name, int age){    this.name = name;    this.age = age;}</pre><h1 id="面向对象三大特性"><a href="#面向对象三大特性" class="headerlink" title="面向对象三大特性"></a>面向对象三大特性</h1><p><em><strong>封装</strong></em></p><p>高内聚，低耦合。</p><p>属性私有，get/set：1. private属性； 2. 提供一些可以操作属性的方法，提供一些public的get/set方法</p><p>好处：1. 提高程序安全性，保护数据； 2. 隐藏代码的实现细节； 3. 统一接口； 4. 增加系统可维护性。</p><p><em><strong>继承</strong></em></p><p>本质是对某一批类的抽象。extends扩展，子类是父类的扩展。Java中只有单继承，没有多继承。</p><p>继承是类和类之间的一种关系。除此之外，类和类之间的关系还有依赖、组合、聚合等。</p><pre data-enlighter-language="java">public class Person{}public class Student extends Person{//子类}public class Teacher extends Person{}</pre><ol><li><p>object类：所有的类都默认继承Object类。</p></li><li><p>super：super指代父类对象。private的无法被继承。</p></li><li><p>方法重写：子类重写父类的方法。方法名必须相同；参数列表必须相同；修饰符范围可以扩大但不能缩小（public&gt;protected&gt;default&gt;private）；抛出的异常范围可以缩小但不能扩大。</p></li></ol><p><em><strong>多态</strong></em></p><p>同一方法可以根据发送对象的不同而采取不同的行为方式。<br>一个对象的实际类型是确定的，但可以指向对象的引用类型有很多。<br>父类的引用指向子类，但不能调用子类独有的方法。</p><p>instanceof判断类型是否相同，要求两个类有包含关系。</p><p>静态变量、方法仅限于该类及其对象使用，其他类无法使用。</p><h1 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h1><p><em><strong>抽象类</strong></em></p><p>abstract：抽象方法只有方法名，没有方法实现。抽象类的所有方法，继承了它的子类，都必须要实现它的方法（重写）。</p><p>不能new这个抽象类，只能靠子类去实现它；抽象类中可以写普通的方法；抽象方法必须在抽象类中。</p><p><em><strong>接口</strong></em></p><p>interface：接口可以实现多继承。接口中所有定义都是抽象的public abstract。接口都需要实现类implements。</p><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><p><em><strong>成员内部类</strong></em></p><pre data-enlighter-language="java">public class Outer{    private int id;    public void out(){        System.out.println("这是外部类的方法");    }    public class Inner{        public void in(){            System.out.println("这是内部类的方法");        }        public void getID(){            System.out.println(id);        }    }}Outer outer = new Outer();Outer.Inner inner = outer.new Inner();inner.getID();</pre><p><em><strong>静态内部类</strong></em></p><pre data-enlighter-language="java">public class Outer{    private int id;    public void out(){        System.out.println("这是外部类的方法");    }    public static class Inner{        public void in(){            System.out.println("这是内部类的方法");        }    }}</pre><p><em><strong>局部内部类</strong></em></p><pre data-enlighter-language="java">public class Outer{    public void method(){        class Inner{            public void in(){        }    }}</pre><p><em><strong>匿名内部类</strong></em></p><pre data-enlighter-language="java">public class Test{    public static void main(String[] args){        new Apple().eat();            }}class Apple(){    public void eat(){        System.out.println("1");    }}</pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04 Java数组</title>
      <link href="/2022/09/01/Java04-%E6%95%B0%E7%BB%84/"/>
      <url>/2022/09/01/Java04-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="数组概述"><a href="#数组概述" class="headerlink" title="数组概述"></a>数组概述</h1><p>数组是<strong>相同类型</strong>数据的<strong>有序</strong>集合，其中每个数据称作数组元素，每个数组元素可以通过下标访问。</p><h1 id="数组声明创建"><a href="#数组声明创建" class="headerlink" title="数组声明创建"></a>数组声明创建</h1><p>数组的四个基本特点:</p><ol><li><p>长度确定。数组一旦被创建，大小不可改变。</p></li><li><p>元素必须是相同类型，不允许出现混合类型。</p></li><li><p>元素可以是任何数据类型，包括基本类型和引用类型。</p></li><li><p>数组变量属引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。数组本身就是对象，Java中对象是在堆中的。因此数组无论保存原始类型还是其他对象类型，数组对象本身是在堆中的。</p></li></ol><p>下标的合法区间：[0,length-1]。<br><strong>ArrayIndexOutOfBoundsException</strong>：数组下表越界异常！</p><pre data-enlighter-language="java">dataType[] arrayRefVar;  //首选，声明数组dataType arrayRefVar[];  //非首选 dataType[] arrayRefVar = new dataType[arraySize];  //创建数组arrays.length //获取数组长度</pre><pre data-enlighter-language="java">//静态初始化int[] a = {1,2,3,4,5,6,7,8,9,10};//动态初始化int b[] = new int[10];b[0] = 1;//默认初始化//b[1] = 0;b[2] = 0;...</pre><h1 id="数组使用"><a href="#数组使用" class="headerlink" title="数组使用"></a>数组使用</h1><p><em><strong>for-each循环</strong></em></p><pre data-enlighter-language="java">int[] arrays = {1,2,3,4,5};for(int i=0;i< arrays.length;i++){    System.out.println(arrays[i]);}for(int array:arrays){    System.out.println(array);}</pre><p><em><strong>数组作方法入参</strong></em></p><pre data-enlighter-language="java">//打印数组元素public static void printArray(int[] arrays){    for(int i=0;i< arrays.length;i++){        System.out.println(array[i]+"");}</pre><p><em><strong>数组作返回值</strong></em></p><pre data-enlighter-language="java">//反转数组public static int[] reverse(int[] arrays){    int[] result = new int[arrays.length];    for(int i=0,j=result.length-1;i< arrays.length;i++,j--){        result[j]=arrays[i];    return result;}</pre><h1 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h1><p>多维数组可以看成是数组的数组。比如二维数组就是一个特殊的一维数组，其中每一个元素都是一个一维数组。</p><h1 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h1><p>数组的工具类<strong>java.util.Arrays</strong>，在使用时可以直接使用类名进行调用。<br>常用功能：</p><ol><li><p>Arrays.toString 打印</p></li><li><p>Arrays.fill 赋值</p></li><li><p>Arrays.sort 排序</p></li><li><p>Arrays.equals 比较相等</p></li><li><p>Arrays.binarySearch 二分查找</p></li></ol><h1 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h1><p>一个数组中大部分元素为0，或者为同一值的数组时，可以用稀疏数组来保存。</p><p>处理方式：</p><ol><li><p>记录数组一共有几行几列，有多少个不同值。</p></li><li><p>把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03 Java方法</title>
      <link href="/2022/08/24/Java03-%E6%96%B9%E6%B3%95/"/>
      <url>/2022/08/24/Java03-%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="方法的定义与调用"><a href="#方法的定义与调用" class="headerlink" title="方法的定义与调用"></a>方法的定义与调用</h1><pre data-enlighter-language="java">//定义修饰符 返回值类型 方法名(参数类型 参数名){    ···    方法体    ···    return 返回值;}//调用对象名.方法名(实参列表)</pre><hr><h1 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h1><p>在一个类中，有相同的函数名称，但形参不同的函数。</p><ol><li><p>方法名称必须相同。</p></li><li><p>参数列表必须不同（个数不同/类型不同/参数排列顺序不同）</p></li><li><p>方法的返回类型可以相同也可以不相同。</p></li><li><p>仅仅返回类型不同不足以成为方法的重载。</p></li></ol><hr><h1 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h1><h1 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h1><p>Java支持传递同类型的可变参数（不定项参数）给一个方法。</p><p>在方法声明中，在指定类型后加一个省略号（···）。</p><p>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。</p><pre data-enlighter-language="java">public static void main(String args[]){    printMax(34,3,3,2,56.5);    printMax(new double[]{1,2,3});}public static void printMax(double... numbers){    if (numbers.length == 0){        System.out.println("No argument passed");        return;    }    double result = numbers[0];    for(int i=1;i< numbers.length;i++){        if (numbers[i] > result){            result = numbers[i];    }    System.out.println("The max value is " + result);}</pre><hr><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>递归结构包括两个部分：</p><ol><li>递归头：什么时候不调用自身方法。如果没有头，将陷入死循环。</li><li>递归体：什么时候需要调用自身方法。<pre data-enlighter-language="java">public static void main(String args[]){System.out.println(f(5));}public static int f(int n){ if (n==1){     return 1; }else{     return n*f(n-1); }}</pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02 Java流程控制</title>
      <link href="/2022/08/22/Java02-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>/2022/08/22/Java02-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="用户交互Scanner"><a href="#用户交互Scanner" class="headerlink" title="用户交互Scanner"></a>用户交互Scanner</h1><p><strong>凡是属于IO流的类如果不关闭会一直占用资源！！！</strong></p><p><em><strong>java.util.Scanner</strong></em></p><ol><li><p>通过Scanner类获取用户的输入；</p></li><li><p>通过next()与nextline()方法获取输入的字符串；</p></li><li><p>通过hasNext()与hasNextLine()判断是否还有输入的数据。</p></li></ol><p><em><strong>next():</strong></em></p><ol><li><p>一定要读取到有效字符后才可以结束输入；</p></li><li><p>对输入有效字符之前遇到的空白，next()方法会自动将其去掉；</p></li><li><p>只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符；</p></li><li><p>next()不能得到带有空格的字符串。</p></li></ol><p><em><strong>nextLine():</strong></em></p><ol><li><p>以Enter为结束符，nextLine()方法返回的是输入回车之前的所有字符；</p></li><li><p>可以获得空白。</p></li></ol><pre data-enlighter-language="java">Scanner scanner = new Scanner(System.in);if (scanner.hasNext()){    String str = scanner.next();    System.out.println("输出的内容为："+str);}scanner.close();</pre><pre data-enlighter-language="java">Scanner scanner = new Scanner(System.in);System.out.println("请输入数据：");String str = scanner.nextLine();System.out.println("输出的内容为："+str);scanner.close();</pre><pre data-enlighter-language="java">nextInt();//hasNextInt();nextFloat();//hasNextFloat();nextDouble();//hasNextDouble();</pre><hr><h1 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h1><h1 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h1><p><em><strong>if选择结构：</strong></em></p><ol><li><font size="4">if单选择</font></li></ol><pre data-enlighter-language="java">Scanner scanner = new Scanner(System.in);System.out.println("请输入内容：");String s = scanner.nextLine();if (s.equals("Hello")){   System.out.println(s);}System.out.println("End");scanner.close();</pre><ol start="2"><li><font size="4">if双选择</font></li></ol><pre data-enlighter-language="java">Scanner scanner = new Scanner(System.in);System.out.println("请输入成绩：");int score = scanner.nextInt();if (score>=60){   System.out.println("及格");}else{    System.out.println("不及格");}scanner.close();</pre><ol start="3"><li><font size="4">if多选择</font></li></ol><pre data-enlighter-language="java">Scanner scanner = new Scanner(System.in);System.out.println()int score = scanner.nextInt();if (score==100){    System.out.println("恭喜满分");}else if(score<100 && score>=90){    System.out.println("A级");}else if(score<90 && score>=80){    System.out.println("B级");}else if(score<80 && score>=70){    System.out.println("C级");}else if(score<70 && score>=60){    System.out.println("D级");}else if(score<60 && score>=0){    System.out.println("不及格");}else{    System.out.println("成绩不合法");}scanner.close();</pre><ol start="4"><li><font size="4">嵌套if</font></li></ol><p><em><strong>switch选择结构：</strong></em></p><p>&ensp;&emsp;case穿透：未遇到break语句之前，所有语句顺序执行。</p><p>&ensp;&emsp;switch匹配：一个具体的值。</p><hr><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><p><em><strong>while循环结构：</strong></em></p><pre data-enlighter-language="java">int i = 0;int sum = 0;while(i<=100){    sum += i;    i++;}System.out.println(sum);</pre><p><em><strong>do…while循环结构：</strong></em></p><pre data-enlighter-language="java">int i = 0;int sum = 0;do{    sum += i;    i++;}while(i<=100)System.out.println(sum);</pre><p><em><strong>for循环结构：</strong></em></p><pre data-enlighter-language="java">int sum = 0;for(int i=1;i<=100;i++){    sum += i;}System.out.println(sum);</pre><pre data-enlighter-language="java">//增强for循环int[] numbers = {10,20,30,40,50};for(int i=0;i<5;i++){    System.out.println(numbers[x]);}for(int x:numbers){    System.out.println(x);}</pre><hr><h1 id="break-amp-continue"><a href="#break-amp-continue" class="headerlink" title="break &amp; continue"></a>break &amp; continue</h1><p>&ensp;&emsp;<strong>break强制结束循环</strong>，不执行循环中剩余的语句。</p><p>&ensp;&emsp;<strong>continue终止本次循环</strong>，跳过剩余语句，进入下一次循环的判定。</p><hr><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><em><strong>九九乘法表：</strong></em></p><pre data-enlighter-language="java">public class Jiu{    public static void main(String[] args){        for(int i=1;i<=9;i++){            for(int j=1;j<=i;j++){                System.out.print(j+"*"+i+"="+(j*i)+"\t");            }            System.out.println();        }    }}</pre><p><em><strong>三角形：</strong></em></p><pre data-enlighter-language="java">public class San{    public static void main(String[] args){        for(int i=1;i<=5;i++){            for(int j=5;j>=i;j--){                System.out.print(" ");            }            for(int j=1;j<=i;j++){                System.out.print("*");            }            for(int j=1;j< i;j++){                System.out.print("*");            }                 System.out.println();        }    }}</pre><hr>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01 Java基础</title>
      <link href="/2022/08/21/Java01-%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/08/21/Java01-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h1><pre data-enlighter-language="java">package package1[. package2[. package3...]];import package1[.package2...].(classname|*);</pre><h1 id="JavaDoc帮助文档"><a href="#JavaDoc帮助文档" class="headerlink" title="JavaDoc帮助文档"></a>JavaDoc帮助文档</h1><pre data-enlighter-language="java">/**  *@author 作者名  *@version 版本号  *@since 指明需要最早使用的idk版本  *@param 参数名  *@return 返回值情况  *@throws 异常抛出情况*/</pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
